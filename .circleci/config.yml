version: 2.1
orbs:
  sam: circleci/aws-sam-serverless@3.1.0

commands:
  destroy-cluster:
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Destroy EKS Cluster
          when: on_fail
          command: |
            # Run commands to destroy the EKS cluster
            eksctl delete cluster --name my-eks-cluster

  install-dependencies:
    steps:
      - run:
          name: Install AWS CLI and Configure
          command: |
            # Configure AWS CLI with credentials (use environment variables)
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION

      - run:
          name: Install kubectl
          command: |
            # Install kubectl
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            mv kubectl /usr/local/bin/
            kubectl version --client
                   
      - run:
          name: Install eksctl
          command: |
            # Install eksctl
            yum install tar gzip -y
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version

jobs:
  linting:
    docker:
      - image: circleci/node:latest
    steps:
      steps:
      - checkout
      - run:
          name: Linting of dockerfiles
          command: |
            npm install
            npm run lint
            
  build-and-deploy:
    machine: true
    steps:
      - checkout
      - run:
          name: Build and Push Docker Image
          command: |
            # Build and push your Docker image
            docker build -t gbengard/my-docker-image:tag .
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker push gbengard/my-docker-image:tag

  create-eks-and-argocd:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Create EKS Cluster
          command: |
            echo
            eksctl create cluster -f ./.circleci/eks-cluster.yml
            kubectl get nodes -o wide
                        
      - run:
          name: Install argocd
          command: |
            kubectl create namespace argocd
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
            sleep 60
            kubectl -n argocd get pods
            kubectl -n argocd get svc
            kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
            sleep 60
            ARGOCD=$(kubectl get svc -n argocd argocd-server -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo $ARGOCD
            kubectl -n argocd get svc
            kubectl -n argocd get secret
            kubectl -n argocd patch secret argocd-secret \
            -p '{"stringData": {
              "admin.password": "$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa",
              "admin.passwordMtime": "'$(date +%FT%T%Z)'"
            }}'
            
      - run:
          name: Create Argocd Application
          command: |
            # Create argocd application
            kubectl apply -f agro-app.yml

workflows:
  the_jobs:
    jobs:
      -linting
      - build-and-deploy:
          requires: [linting]
          context: Credentials
      - create-eks-and-argocd:
          requires: [build-and-deploy]
          context: Credentials
