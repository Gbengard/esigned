version: 2.1

executors:
  default-executor:
    docker:
      - image: circleci/node:latest

commands:
  destroy-cluster:
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Destroy EKS Cluster
          when: on_fail
          command: |
            # Run commands to destroy the EKS cluster
            eksctl delete cluster --name my-eks-cluster



  install-dependencies:
    steps:
      - run:
          name: Install AWS CLI and Configure
          command: |
            # Install AWS CLI
            # yum update && yum install -y unzip
            # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            # unzip awscliv2.zip
            # ./aws/install
            # aws --version

            # Configure AWS CLI with credentials (use environment variables)
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION

      - run:
          name: Install kubectl
          command: |
            # Install kubectl
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            mv kubectl /usr/local/bin/
            kubectl version --client

            yum install tar gzip -y
            yum update
            yum install openssl -y
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
            chmod +x get_helm.sh
            ./get_helm.sh
            export KUBECONFIG=$HOME/.kube/config


      - run:
          name: Install eksctl
          command: |
            # Install eksctl
            yum install tar gzip -y
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version

jobs:
  build-and-deploy:
    machine: true
    steps:
      - checkout
      - run:
          name: Build and Push Docker Image
          command: |
            # Build and push your Docker image
            docker build -t gbengard/my-docker-image:tag .
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker push gbengard/my-docker-image:tag

  create-eks-cluster-app:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Create EKS Cluster
          command: |
            echo
            eksctl create cluster -f ./.circleci/eks-cluster.yml
            kubectl get nodes -o wide
            aws eks update-kubeconfig --name my-eks-cluster --region us-east-1
            
  create-argocd:
    docker:
      - image: amazon/aws-cli
      
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Install argocd
          command: |
            EKS_CLUSTER_NAME="my-eks-cluster"
            EKS_CLUSTER_DOMAIN=$(aws eks describe-cluster --name "$EKS_CLUSTER_NAME" --query "cluster.endpoint" --output text)
            helm repo add argo https://argoproj.github.io/argo-helm
            helm repo update
            helm install argocd argo/argo-cd \
              --namespace argocd \
              
            helm upgrade argocd argo/argo-cd \
              --namespace argocd \
              --reuse-values \
              --set server.ingress.enabled=false \ 
              --set server.service.type=NodePort \
              --set server.service.nodePort=32007
            helm upgrade argocd argo/argo-cd \
              --namespace argocd \
              --reuse-values \
              --set server.ingress.hosts[0].name="$EKS_CLUSTER_DOMAIN" \
              --set server.ingress.hosts[0].path=/ \
              --set server.ingress.tls[0].hosts[0]="$EKS_CLUSTER_DOMAIN" \
              --set server.ingress.tls[0].secretName=argocd-tls-secret
              ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode)
              echo "Initial ArgoCD Password: $ARGOCD_PASSWORD"

  create-argocd-app:
    docker:
      - image: amazon/aws-cli
      - image: argoproj/argocli
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Create Argocd Application
          command: |
            # Create argocd application
            argocd app create my-app --repo <repo-url> --path <path> --dest-server https://kubernetes.default.svc --dest-namespace <namespace>

workflows:
  the_jobs:
    jobs:
      - build-and-deploy:
          context: Credentials
      - create-eks-cluster-app:
          requires: [build-and-deploy]
          context: Credentials
      - create-argocd:
          requires: [create-eks-cluster-app]
          context: Credentials
      
      - create-argocd-app:
          requires: [create-argocd]
          context: Credentials