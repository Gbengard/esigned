version: 2.1

executors:
  default-executor:
    docker:
      - image: circleci/node:latest

commands:
  destroy-cluster:
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Destroy EKS Cluster
          when: on_fail
          command: |
            # Run commands to destroy the EKS cluster
            eksctl delete cluster --name my-eks-cluster



  install-dependencies:
    steps:
      - run:
          name: Install AWS CLI and Configure
          command: |
            # Install AWS CLI
            # yum update && yum install -y unzip
            # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            # unzip awscliv2.zip
            # ./aws/install
            # aws --version

            # Configure AWS CLI with credentials (use environment variables)
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION

      - run:
          name: Install kubectl
          command: |
            # Install kubectl
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.4/2023-08-16/bin/linux/amd64/kubectl
            chmod +x kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
            kubectl version --short --client

      - run:
          name: Install eksctl
          command: |
            # Install eksctl
            yum install tar gzip -y
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version

jobs:
  build-and-deploy:
    machine: true
    steps:
      - checkout
          

      - run:
          name: Build and Push Docker Image
          command: |
            # Build and push your Docker image
            docker build -t gbengard/my-docker-image:tag .
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker push gbengard/my-docker-image:tag

  create-eks-cluster-app:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Create EKS Cluster
          command: |
            echo
            eksctl create cluster -f ./.circleci/eks-cluster.yml
            kubectl get nodes -o wide
            aws eks update-kubeconfig --name my-eks-cluster --region us-east-1
            
  create-argocd:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Install argocd
          command: |
            kubectl create namespace argocd
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.5.22/manifests/install.yaml
            argocd version
  create-argocd-cli:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Install Argocd CLI
          command: |
            # Install Argocd CLI
            wget https://github.com/argoproj/argo-cd/releases/download/v2.5.22/argocd-linux-amd64
            chmod +x argocd
            mv argocd-linux-amd64 /usr/local/bin
            argocd version
  create-argocd-app:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Create Argocd Application
          command: |
            # Create argocd application
            argocd app create my-app --repo <repo-url> --path <path> --dest-server https://kubernetes.default.svc --dest-namespace <namespace>

workflows:
  the_jobs:
    jobs:
      - build-and-deploy:
          context: Credentials
      - create-eks-cluster-app:
          requires: [build-and-deploy]
          context: Credentials
      - create-argocd:
          requires: [create-eks-cluster-app]
          context: Credentials
      - create-argocd-cli:
          requires: [create-argocd]
          context: Credentials
      - create-argocd-app:
          requires: [create-argocd-cli]
          context: Credentials